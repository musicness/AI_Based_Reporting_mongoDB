from dotenv import load_dotenv
load_dotenv()  # Load all environment variables
import streamlit as st
import os
from pymongo import MongoClient
import google.generativeai as genai
import json
# Configure the Gemini API key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function to load Google Gemini model and provide SQL query as response
def get_gemini_response(question, prompt):
    try:
        model = genai.GenerativeModel('gemini-pro')
        response = model.generate_content([f"{prompt[0]}\n\n{question}"])

        #print("Response starts here")
        #json.dumps(response)
        #print(response) 
        # print(type(response))
        #print("Response neds here")
        # Extract the generated text based on the updated structure
        generated_text = response.candidates[0].text  # Or another appropriate path
        return generated_text 
    except Exception as e:
        print(f"Error generating response: {e}")
        return None
# MongoDB connection details
db_name = "vendorData"
collection_name = "vendors"
uri = "mongodb://localhost:27017/"

def read_mongo_query(response):
    """
    Executes the MongoDB query generated by Gemini and returns the results.

    Args:
        response: The MongoDB query string generated by the Gemini model.

    Returns:
        A list of dictionaries, where each dictionary represents a document 
        matching the query.
    """
    try:
        # Connect to MongoDB
        client = MongoClient(uri)
        db = client[db_name]
        collection = db[collection_name]

        # Execute the query
        results = collection.aggregate(eval(response))  # Evaluate the query string
        return list(results)

    except Exception as e:
        print(f"Error executing MongoDB query: {e}")
        return []

# Define the prompt
prompt = [
    """
        You are an expert in converting English questions to MongoDB queries! 
        The MongoDB database has the name 'vendorData' and a collection named 'vendors'. 
        For example:
            - "show me the list of all the vendors" 
              will be like this: 
              "db.vendors.find()"
            - "find me the value of the vendor with the highest invoice" 
              will be like this: 
              "db.vendors.aggregate({ $sort: { invoice_amount: -1 } }, { $limit: 1 }, { $project: { invoice_amount: 1, _id: 0 } })" 
                return the queries in json format
    """
]

# Streamlit app
st.set_page_config(page_title="Retrieve MongoDB Query", layout="wide")
st.header("Gemini App to Retrieve MongoDB Data")

question = st.text_input("Ask a question:", key="input")
submit = st.button("Generate Query")

# If submit is clicked
if submit:
    response = get_gemini_response(question, prompt)
    if response:
        data = read_mongo_query(response)
        st.subheader("Query Result:")
        if data:
            for row in data:
                st.write(row)
        else:
            st.warning("No results found.")
    else:
        st.error("Failed to generate MongoDB query.")